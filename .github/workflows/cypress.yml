name: PostgreSQL service example
on:
  push:
    branches: [master, gh_actions, dev]
  pull_request:
    branches: [master, gh_actions, dev]
  

jobs:
  # Label of the container job
  container-job:
    # Containers must run in Linux based operating systems
    runs-on: ubuntu-latest

    # Service containers to run with `container-job`
    services:
      # Label used to access the service container
      postgres:
        # Docker Hub image
        image: postgres
        # Provide the password for postgres
        env:
          POSTGRES_PASSWORD: postgres
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          # Maps tcp port 5432 on service container to the host
          - 5432:5432

    steps:
      # Downloads a copy of the code in your repository before running CI tests
      - name: Check out repository code
        uses: actions/checkout@v2

      - name: Cache multiple paths
        uses: actions/cache@v2
        with:
            path: |
                    backend/node_modules
                    frontend/node_modules
            key: ${{ runner.os }}-${{ hashFiles('**/lockfiles') }}
      
      # Performs a clean installation of all dependencies in the `package.json` file
      # For more information, see https://docs.npmjs.com/cli/ci.html
      - name: Install frontend dependencies
        run: cd frontend && npm i

      - name: install backend dependencies
        run: cd backend && npm i

      - name: install dependencies
        run: npm i

      - name: tietokannan sisältö
        run: cd backend && npx sequelize-cli db:create && npm run migrate && npm run seed && node utils/populate_db
        env: 
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          DB_DATABASE: ${{ secrets.DB_DATABASE }}
          DB_HOST: ${{ secrets.DB_HOST }}

      - name: käynnistä serveri
        run: cd backend && npm run start:coverage &
        env: 
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          DB_DATABASE: ${{ secrets.DB_DATABASE }}
          DB_HOST: ${{ secrets.DB_HOST }}
          JWTKEY: ${{ secrets.JWTKEY }}

      - name: käynnistä sivu
        run: cd frontend && npm run start &

      - name: aja testit rootista
        run: npm run test && npm run coverage

      - name: Coveralls GitHub Action
        uses: coverallsapp/github-action@v1.1.2
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
